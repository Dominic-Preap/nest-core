import { BaseLimitTokenOption, BaseNextOption } from '../_base';
import { User } from '../user';

// ===================================================
// Application
// ===================================================

export interface Application {
  /**
   * The unique ID of the application.
   */
  app_id: string;

  /**
   * The name of the application.
   */
  name: string;

  /**
   * The credential of the application for accessing the Platform API. It is an opaque string which should be submitted to SendBird server for application identification when requesting.
   */
  api_token: string;

  /**
   * The URL of the application's icon image.
   */
  icon_url: string;
}

export type ListApplicationOption = BaseLimitTokenOption;

export interface ListApplicationResult extends BaseNextOption {
  /**
   * A list of applications resources.
   */
  applications: Application[];
}

export interface CreateApplicationOption {
  /**
   * Specifies the name of the application. The length is limited to 128 bytes.
   */
  name: string;
}

export interface CCUResult {
  /**
   * The number of concurrent connections.
   */
  ccu: number;
}

export interface MAUOption {
  /**
   * Specifies the date of reference.
   * @example 2018-11-30
   */
  date?: string;
}

export interface MAUResult {
  /**
   * The number of monthly active users during a month behind the specified date is returned in the response body.
   */
  mau: number;
}

export type DAUOption = MAUOption;

export interface DAUResult {
  /**
   * The number of monthly active users during a month behind the specified date is returned in the response body.
   */
  dau: number;
}

export interface MessageDailyCountOption {
  /**
   * Specifies the starting date to return results of.
   * @example 2018-11-30
   */
  start_date?: string;

  /**
   * Specifies the ending date to return results of.
   * @example 2018-11-30
   */
  end_date?: string;
}

export interface MessageDailyCountResult {
  /**
   * The number of messages sent within the application on a given date.
   */
  message_count?: { [key: string]: number };
}

// ---------------------------------------------
export interface PushConfiguration {
  /**
   * A unique provider ID that identifies the push configuration. This is automatically generated by SendBird.
   */
  id: string;

  /**
   * The registered FCM server key.
   */
  api_key: string;

  /**
   * The type of the push configuration
   */
  push_type: string;

  /**
   * The certificate type of the .p12 file.
   */
  apns_cert_env_type: string;

  /**
   * The type of the push configuration which is either **development** or **production**.
   */
  apns_expiration: number;

  /**
   * The name of the certificate.
   */
  apns_name: string;

  /**
   * Indicates whether to badge your client app's icon with the number of a user's unread messages.
   * A value of **1** indicates that the number of a user's unread messages is badged with the icon.
   */
  has_unread_count_badge: number;

  /**
   * Indicates for your client app whether to perform a silent background update on a user's device.
   */
  content_available: boolean;

  /**
   * Indicates for your client app whether or not to modify the payload of a push notification before it is displayed on a user's device.
   */
  mutable_content: boolean;

  /**
   * The name of a sound file to be played when a push notification is delivered to your client app.
   */
  push_sound: string;
}

interface ProviderIdOption {
  /**
   * Specifies the provider ID of the push configuration to retrieve.
   */
  provider_id: string;
}

interface PushTypeOption {
  /**
   * Specifies the type of the push configuration to retrieve a list. Acceptable values are `fcm` (for FCM) and `apns` (for APNs).
   */
  push_type: 'fcm' | 'apns';
}

export type ListPushConfigurationsOption = PushTypeOption;

export interface ListPushConfigurationsResult {
  /**
   * A list of either FCM or APNs push configurations.
   */
  push_configurations: PushConfiguration[];
}

export interface ViewPushConfigurationOption extends ListPushConfigurationsOption, ProviderIdOption {}

export interface AddFCMPushConfigurationOption {
  /**
   * Specifies the FCM server key to register.
   */
  api_key: string;

  /**
   * Specifies the name of a sound file to be played when a push notification is delivered to your client app. The file should be located in the /res/raw folder.
   */
  push_sound?: string;
}

export interface UpdateFCMPushConfigurationOption extends ProviderIdOption, Partial<AddFCMPushConfigurationOption> {}

export interface UpdateFCMPushConfigurationResult {
  /**
   * A unique provider ID that identifies the updated push configuration.
   */
  push_configurations: string;
}

export interface AddAPNsPushConfigurationOption {
  /**
   * In a form of the `multipart/form-data` content type, specifies a .p12 file of which type is either **development** or **production**.
   * SendBird server scans the content of the file, finds out the certificate type, and then registers the file as the corresponding type.
   * If you upload a wrong file, you will receive an error.
   */
  apns_cert: string;

  /**
   * Specifies the certificate type of the .p12 file. Acceptable values are **development** and **production**.
   * There is no need to specify this property when the apns_cert above is specified.
   */
  apns_cert_env_type?: string;

  /**
   * Specifies the password of the certificate file which has been set during the .p12 export.
   */
  apns_cert_password?: string;

  /**
   * Determines whether to badge your client app's icon with the number of a user's unread messages. (Default: true)
   */
  has_unread_count_badge?: boolean;

  /**
   * Determines for your client app whether to perform a silent background update on a user's device.
   * For more information, see the Apple Developer Documentation's Pushing Updates to Your App Silently. (Default: false)
   */
  content_available?: boolean;

  /**
   * Determines for your client app whether or not to modify the payload of a push notification before it is displayed on a user's device.
   * For more information, see the Apple Developer Documentation's Modifying Content in Newly Delivered Notifications. (Default: false)
   */
  mutable_content?: boolean;

  /**
   * Specifies the name of a sound file to be played when a push notification is delivered to your client app.
   * The file can be in the app's main bundle or in the Library/Sounds folder of the app's data container.
   */
  push_sound?: string;
}

export interface UpdateAPNsPushConfigurationOption extends ProviderIdOption, Partial<AddAPNsPushConfigurationOption> {}

export type UpdateApnsPushConfigurationResult = UpdateFCMPushConfigurationResult;

export interface RemovePushConfigurationOption extends ProviderIdOption, PushTypeOption {}

export interface RemovePushConfigurationResult {
  push_configurations: string[];
}

export type DeleteAPNsCertificateOption = ProviderIdOption;

export type DeleteAPNsCertificateResult = RemovePushConfigurationResult;

// ---------------------------------------------

export interface PushMessageTemplate {
  template_name: string;
  template: {
    MESG: string;
    FILE: string;
    ADMM: string;
  };
}

interface TemplateNameOption {
  /**
   * Specifies the name of a push notification template to retrieve. Acceptable values are **default** and **alternative**.
   */
  template_name: string;
}

export interface ListPushMessageTemplatesResult {
  /**
   * A list of push notification templates.
   */
  push_message_templates: PushMessageTemplate[];
}

export type ViewPushMessageTemplateOption = TemplateNameOption;

export interface UpdatePushMessageTemplateOption extends TemplateNameOption {
  /**
   * The push notification template of which message types to be updated and their detailed format.
   */
  template: {
    /**
     * Specifies a format for text messages. We support customization of two fields, which are the `sender_name` and `message`.
     * These fields will be replaced with actual corresponding values when sending notification requests to FCM or APNs.
     */
    MESG: string;

    /**
     * Specifies a format for file messages. We support customization of one field, which is the `filename`.
     * This field will be replaced with actual corresponding values when sending notification requests to FCM or APNs.
     */
    FILE: string;

    /**
     * Specifies a format for admin messages. We support customization of one field, which is the `message`.
     * This field will be replaced with actual corresponding values when sending notification requests to FCM or APNs.
     */
    ADMM: string;
  };
}

export interface UpdatePushMessageTemplateResult extends TemplateNameOption {
  /**
   * A list of push notification templates.
   */
  push_message_templates: Array<
    PushMessageTemplate & {
      push_message_preview: {
        MESG: string;
        FILE: string;
        ADMM: string;
      };
    }
  >;
}

export interface DefaultChannelInvitationPreference {
  /**
   * Indicates for users within an application whether or not to automatically join
   * a private group channel promptly from an invitation without having to accept it. (Default: true)
   */
  auto_accept: boolean;
}

// ---------------------------------------------

export interface ApiTokenResult {
  token: string;
  created_at: number;
}

export interface ListApiTokenResult {
  api_tokens: ApiTokenResult[];
}

// ===================================================
// Global Setting
// ===================================================

interface DomainFilter {
  /**
   * An array of domains to detect. Each item of the array is specified at least with a combination of domain name and TLD (top level domain) like **amazon.com**.
   */
  domains: string[];

  /**
   * The filtering mode to apply to messages with URLs that contain any of the domain set. Acceptable values are limited to the following:
   * - **0** (none): takes no action on matching messages. This is the default setting.
   * - **1** (allow): only allows messages containing URLs that match the domains property.
   * - **2** (block): blocks messages containing URLs that match the domains property.
   * - **3** (replace): detects and replaces URLs that match the domains property with asterisks (*).
   */
  type: number;
}

interface ProfanityFilter {
  /**
   * An array of words to detect. ***word** filters all words that end with "word" including "word" itself while **word*** filters all words that start with "word" including "word" itself.
   */
  keywords: string[];

  /**
   * A list of regular expressions used for detecting. Each item of the list is specified in {**"regex"**: _"a pattern in regular expression"_} format.
   */
  regex_filters: any[];

  /**
   * The filtering method to apply to messages that contain the specified keywords or regular expressions. Valid values are the following:
   * - **0 (none)**: takes no action on matched messages. This is the **default** setting.
   * - **1 (replace)**: detects and replaces words that match the **keywords** property with asterisks (*).
   * - **2 (block)**: prevents users from sending messages that contain the **keywords** property or match the **regex_filters** property.
   */
  type: number;
}

interface ProfanityTriggeredModeration {
  /**
   * The number of profanity violation limit which then imposes a penalty on a user if reached.
   * A value of **0** indicates that automatically-triggered moderation is turned off.
   * A value of equal to or larger than **1** indicates that the moderation is turned on
   * and imposes a penalty on a user who commits a number of violations equal to or beyond
   * the set value of the **count** property within the set time of the **duration** property.
   */
  count: number;

  /**
   * The duration of the time window in seconds which counts the number of a user’s violations within a channel. For example,
   * if the **count** property is 2 and the **duration** property is 5, the number of violations equal to or beyond 2 will be moderated for every 5 seconds.
   * The maximum value is **86400** which indicates **60** days. (Default: 1 second)
   */
  duration: number;

  /**
   * The type of moderation penalty within a channel which is permanently imposed on users until canceled.
   * Valid values are **0** (no action), **1** (mute), **2** (kick), and **3** (ban). (Default: **0**)
   */
  action: number;
}

interface TextModeration {
  /**
   * An array of one or more language codes specifying the languages which are moderated.
   * Currently, the moderation supports only English (en), Spanish (es), and French (fr).
   */
  languages: string[];

  /**
   * A map of one or more attributes which represent machine learning models to score the perceived impact that
   * a text message have on a conversation in terms of its **toxicity** probability. Currently, `TOXICITY` model is only supported for a limited set of languages.
   */
  requestedAttributes: any;

  /**
   * The moderation level to apply to the text messages perceived as toxic. Valid values are
   * - **0** (turning off moderation),
   * - **1** (manual moderation for reported messages),
   * - **2** (automatic moderation for reported messages), and
   * - **3** (automatic moderation for all sent messages). (Default: 0)
   */
  moderationLevel: number;

  /**
   * Indicates whether to allow Perspective API to store text messages for future research to improve the API over time.
   * (Default: **true**, which doesn't allow the API to store the submitted text messages.)
   *
   * @default true
   */
  doNotStore: boolean;
}

interface ImageModeration {
  /**
   * The moderation method to apply to the images and image URLs in the text and file messages. Valid values are the following:
   * - **0 (none)**: no moderation is imposed. This is the default setting.
   * - **1 (normal)**: the messages with images or image URLs are blocked if the images or image URLs violate the content policies.
   * - **2 (strict)**: the file messages with no images are also blocked in addition to the messages with explicit images or inappropriate image URLs.
   */
  type: number;

  /**
   * If **true**, the moderation method set by the **type** property above is ignored and no moderation is imposed on the text and file messages
   * in regard to explicit images or inappropriate image URLs. It will only give the image analysis results in the response.
   * If **false**, the image moderation works according to the moderation method already set. (Default: **false**)
   */
  soft_block: boolean;

  /**
   * A set of features pertaining to the images for moderation.
   * Each feature specifies the content likelihood for the image which is used as a moderation standard.
   * Valid likelihood values are:
   * - **0** (unknown),
   * - **1** (very unlikely),
   * - **2** (unlikely),
   * - **3** (possible),
   * - **4** (likely), and
   * - **5** (very likely).
   */
  limits: ImageModerationLimits;

  /**
   * Indicates whether to check if the image URLs in the text and file messages are appropriate. (Default: false)
   */
  check_urls: boolean;
}

interface ImageModerationLimits {
  /**
   * Represents the adult content likelihood for the image. (Default: **3**)
   */
  adult: number;

  /**
   * Spoof likelihood. (Default: **5**)
   */
  spoof: number;

  /**
   * Likelihood that the image is a medical image. (Default: **5**)
   */
  medical: number;

  /**
   * Likelihood that the image contains violent content. (Default: **3**)
   */
  violence: number;

  /**
   * Likelihood that the image contains racy content. (Default: **4**)
   */
  racy: number;
}

export interface GlobalSetting {
  /**
   * The length of time in hours which the messages are retained. (Default: **876000**)
   */
  message_retention_hours: number;

  /**
   * Indicates whether to display past messages to new members of a group channel.
   * If `true`, the entire message history of the channel is shown to who newly join the channel. (Default: `false`)
   *
   * @default false
   */
  display_past_message: boolean;

  /**
   * Indicates whether to allow clickable links in a message within the application. (Default: `true`)
   *
   * @default true
   */
  allow_links: boolean;

  /**
   * The maximum length of a message allowed to be sent within the application.
   * Valid values are `-1`, `50`, `100`, `200`, `500`, `1000`, and `5000`. A value of `-1` indicates that no limit is imposed.
   */
  max_message_length: number;

  /**
   * The maximum number of messages which a user is allowed to send to a channel during a set time duration.
   * A value of `-1` indicates that no limit is imposed. (Default: `-1`)
   *
   * @default -1
   */
  user_messages_per_channel: number;

  /**
   * The period which is used as a base unit for counting the number of message which a user sends to a channel. (Default: `1`)
   *
   * @default 1
   */
  user_messages_per_channel_duration: number;

  /**
   * A domain filter configuration to filter out text and file messages with URLs that contain the domain set.
   */
  domain_filter: DomainFilter;

  /**
   * A filter configuration on certain words and patterns for matching character combinations in strings, which are not allowed to be used within the application.
   */
  profanity_filter: ProfanityFilter;

  /**
   * A moderation configuration on which penalty is automatically imposed on users who reach the profanity violation limit within a channel.
   */
  profanity_triggered_moderation: ProfanityTriggeredModeration;

  /**
   * A moderation configuration on which penalty is imposed on abusive and harassing text messages within an application. Perspective API is used for text moderation.
   */
  text_moderation: TextModeration;

  /**
   * A moderation configuration on inappropriate images within the application. Google Cloud Vision API is used for image moderation and supports many types of images.
   */
  image_moderation: ImageModeration;
}

export interface UpdateOption {
  /**
   * Specifies the length of time in hours which the messages are retained.
   */
  message_retention_hours?: number;

  /**
   * Determines whether to display past messages to new members of a group channel.
   * If set to **true**, the entire message history of the channel is shown to who newly join the channel.
   *
   */
  display_past_message?: boolean;

  /**
   * Determines whether to allow clickable links in a message within the application.
   */
  allow_links?: boolean;

  /**
   * Specifies the maximum length of a message allowed to be sent within the application.
   * Acceptable values are **-1**, **50**, **100**, **200**, **500**, **1000**, and **5000**. A value of **-1** indicates that no limit is imposed.
   */
  max_message_length?: number;

  /**
   * Specifies the maximum number of messages which a user is allowed to send to a channel during a set time duration. A value of -1 indicates that no limit is imposed.
   */
  user_messages_per_channel?: number;

  /**
   * Specifies the period which is used as a base unit for counting the number of message which a user sends to a channel.
   */
  user_messages_per_channel_duration?: number;

  /**
   * A domain filter configuration to filter out text and file messages with URLs that contain the domain set.
   */
  domain_filter?: Partial<DomainFilter>;

  /**
   * A filter configuration on certain words and patterns for matching character combinations in strings, which are not allowed to be used within the application.
   */
  profanity_filter?: Partial<ProfanityFilter>;

  /**
   * A moderation configuration on which penalty is automatically imposed on users who reach the profanity violation limit within a channel.
   */
  profanity_triggered_moderation?: Partial<ProfanityTriggeredModeration>;

  /**
   * A moderation configuration on which penalty is imposed on abusive and harassing text messages within an application. Perspective API is used for text moderation.
   */
  text_moderation?: Partial<TextModeration>;

  /**
   * A moderation configuration on inappropriate images within the application. Google Cloud Vision API is used for image moderation and supports many types of images.
   */
  image_moderation?: Partial<ImageModeration>;
}

// ===================================================
// Channel Setting
// ===================================================

export type ListSettingsByChannelCustomTypeOption = BaseLimitTokenOption;

export interface ListSettingsByChannelCustomTypeResult extends BaseNextOption {
  /**
   * A list of the settings per custom channel type.
   */
  channel_custom_type_settings: GlobalSetting[];
}

export interface GetSettingsByChannelCustomTypeOption {
  /**
   * Specifies the custom channel type of which settings to retrieve.
   */
  custom_type: string;
}

export interface CreateSettingsByChannelCustomTypeOption extends Partial<GlobalSetting> {
  /**
   * Specifies the custom channel type.
   */
  custom_type: string;
}

export type UpdateSettingsByChannelCustomTypeOption = CreateSettingsByChannelCustomTypeOption;

export interface DeleteSettingsByChannelCustomTypeOption {
  /**
   * Specifies the custom channel type of which settings to delete.
   */
  custom_type: string;
}

export interface ListOperatorsOption extends BaseLimitTokenOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;
}

export interface ListOperatorsResult extends BaseNextOption {
  /**
   * A list of the users who are registered as the operators of the channel.
   */
  operators: User[];
}

export interface RegisterOperatorsOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;

  /**
   * Specifies an array of one or more IDs of the users to register as operators to the channels with the specified custom type.
   * If the operators are not members of group channels yet, they need an invitation to join private group channels
   * while they don't need any to join public group channels. The maximum number of operators allowed per channel is **100**.
   */
  operator_ids: string[];

  /**
   * When there are no matching users with the IDs specified in the **operator_ids** property within the application,
   * determines for the SendBird system whether to register existing users as operators in addition to creating new users to register in advance.
   * If **true**, new users in the **operator_ids** property are created and registered as operators along with the existing users.
   * If **false**, only existing users are registered as operators. (Default: **false**)
   */
  on_demand_upsert?: boolean;
}

export interface UnregisterOperatorsOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;

  /**
   * Specifies an array of one or more operator IDs to unregister from the channels with the specified custom type.
   * The operators in this array remain as the members of the channel after losing their operational roles.
   */
  operator_ids: string[];
}

export type ListBannedUsersOption = ListOperatorsOption;

export interface ListBannedUsersResult extends BaseNextOption {
  /**
   * A list of the users who are registered as the operators of the channel.
   */
  banned_list: Array<{
    /**
     * The user resource which contains the simplified information on the banned user.
     */
    user: User;

    /**
     * The timestamp of when the ban starts, in Unix milliseconds.
     */

    start_at: number;

    /**
     * The timestamp of when the ban is scheduled to end, in Unix milliseconds.
     */
    end_at: number;

    /**
     * A reason for the banning.
     */
    description: number;
  }>;
}

export interface BanUsersOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;

  /**
   * Specifies a list of bans which contain information on user, ban period, and reason.
   */
  banned_list: Array<{
    /**
     * Specifies the ID of the user to ban.
     */
    user_id: string;

    /**
     * Specifies the ban duration. If set to **-1**, the user is banned permanently (10 years, technically). (Default: **-1**)
     */
    seconds?: string;

    /**
     * Specifies a reason for the banning. The length is limited to 250 bytes.
     */
    description?: string;
  }>;

  /**
   * When there are no matching users with the IDs specified in the **banned_list** property within the application,
   * determines for the SendBird system whether to ban existing users in addition to creating new users to ban in advance.
   * If **true**, new users in the **banned_list** property are created and banned in advance along with the existing users.
   * If **false**, only existing users are banned. (Default: **false**)
   *
   * * The **on_demand_user_upsert** can be used interchangeably with this property.
   */
  on_demand_upsert?: boolean;
}

export interface UnbanUsersOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;

  /**
   * Specifies an array of one or more IDs of the users to unban from channels with the custom type.
   */
  user_ids: string[];
}

export type ListMutedUsersOption = ListOperatorsOption;

export interface ListMutedUsersResult extends BaseNextOption {
  /**
   * A list of the muted users
   */
  muted_list: User[];
}

export interface MuteUsersOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;

  /**
   * Specifies an array of one or more IDs of the users to mute in channels with the custom type.
   */
  user_ids: string[];

  /**
   * Specifies the duration of mute status. If set to -1, the user is muted permanently (10 years, technically). (Default: -1)
   */
  seconds?: number;

  /**
   * Specifies a reason for the muting.
   */
  description?: string[];

  /**
   * When there are no matching users with the IDs specified in the **user_ids** property within the application,
   * determines for the SendBird system whether to mute existing users in addition to creating new users to mute in advance.
   * If **true**, new users in the **user_ids** property are created and muted in advance along with the existing users.
   * If **false**, only existing users are muted. (Default: **false**)
   *
   * * The on_demand_user_upsert can be used interchangeably with this property.
   */
  on_demand_upsert?: boolean;
}

export interface UnmuteUsersOption {
  /**
   * Specifies a custom channel type which chooses a group of channels to perform this action.
   */
  custom_type: string;

  /**
   * Specifies an array of one or more IDs of the users to unmute in channels with the custom type.
   */
  user_ids: string[];
}
