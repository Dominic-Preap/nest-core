import { Language } from '../_base';
import { User, UserIdOption } from '../user';

interface File {
  /**
   * The URL of the file where it is hosted.
   */
  url: string;

  /**
   * The name of the file that you can specify.
   */
  name: string;

  /**
   * The `MIME` type of the file that you can specify.
   */
  type: string;

  /**
   * The size of the file that you can specify.
   */
  size: number;

  /**
   * Additional data that you can store for the message.
   */
  data: string;
}

export interface Message {
  /**
   * A unique identifier for the message.
   */
  message_id: number;

  /**
   * The type of the message:
   * - which is `MESG` for a text message.
   * - which is `FILE` for a file message.
   * - which is `ADMM` for an admin message.
   */
  type: 'MESG' | 'FILE' | 'ADMM';

  /**
   * A custom message type which is used for message grouping.
   */
  custom_type: string;

  /**
   * The unique URL of the channel where the message is sent to.
   */
  channel_url: string;

  /**
   * The user who sent the message.
   */
  user: User;

  /**
   * The mentioning method which indicates the user scope who get a notification for the message.
   * A value of `users` indicates that only the specified users with the `mentioned_users` property below get notified.
   * A value of channel indicates that all users in the `channel` get notified.
   */
  mention_type: string;

  /**
   * The IDs of the specific users who get a notification for the message.
   */
  mentioned_users: string[];

  /**
   * Indicates whether the message is removed from the channel.
   */
  is_removed: boolean;

  /**
   * The content of the message.
   */
  message: string;

  /**
   * The messages of the same meaning which are automatically translated into other languages from the original language of the message.
   */
  translations: string[];

  /**
   * Additional data that you can store for the message.
   */
  data: string;

  /**
   * The time that the message was sent, in Unix milliseconds format.
   */
  created_at: number;

  /**
   * The time that the message was updated, in Unix milliseconds format.
   */
  updated_at: number;

  /**
   * A file contained in the message. This property is empty for any text messages.
   */
  file?: File;

  /**
   * The thumbnail images which were automatically generated by SendBird server from the uploaded image or video file in the message,
   * or which were specified by URLs that are already hosted externally. The auto-thumbnail generation is one of SendBird's premium features.
   */
  thumbnails?: any[];

  /**
   * Indicates whether the file in the message and generated thumbnail images are only accessible by the users
   * within the application who are participating in the same open channel, or who are the members of the same group channel.
   * This property is only effective when using the share encrypted files, which is one of SendBird's premium features.
   */
  require_auth: boolean;
}

type SortedMetaArray = Array<{ key: string; value: string[] }>;

interface ChannelUrlOption {
  /**
   * Specifies the URL of the channel where the reported message is in.
   */
  channel_url: string;
}

interface ChannelOption extends ChannelUrlOption {
  /**
   * Specifies the type of the channel. Either `open_channel` or `group_channel`.
   */
  channel_type: 'open_channels' | 'group_channels';
}

interface MessageIdOption {
  /**
   * Specifies the unique ID of the message to retrieve.
   */
  message_id: number;
}

export type ListOption = ChannelOption;

export interface ViewOption extends ChannelOption, MessageIdOption {}

export interface CreateOption extends ChannelOption, Partial<UserIdOption> {
  /**
   * The type of the message:
   * - which is `MESG` for a text message.
   * - which is `FILE` for a file message.
   * - which is `ADMM` for an admin message.
   */
  message_type: 'MESG' | 'FILE' | 'ADMM';

  /**
   * Specifies the content of the message.
   */
  message?: string;

  // ----------------------------------

  /**
   * Depending on the file upload method, this specifies the data of the file to upload to SendBird server in raw binary format,
   */
  file?: any;

  /**
   * Specifies the URL of the file which is hosted on the server of your own or other external third party companies.
   * If this url property is specified, the file property is **not required**.
   */
  url?: string;

  /**
   * If the file property is used for file upload, this property is automatically specified by SendBird server. Otherwise you should specify the name of the file directly.
   */
  file_name?: any;

  /**
   * If the file property is used for file upload, this property is automatically specified by SendBird server. Otherwise you should specify the size of the file directly.
   */
  file_size?: any;

  /**
   * If the file property is used for file upload, this property is automatically specified by SendBird server. Otherwise you should specify the media type of the file directly.
   */
  file_type?: any;

  /**
   * Specifies an array of one or more URLs of the external thumbnail images which are generated from the image which is specified by the url property.
   */
  thumbnails?: string[];

  /**
   * Determines whether the file in the message and generated thumbnail images are only accessible by the users
   * within the application who are participating in the same open channel, or who are the members of the same group channel.
   * This property is only effective when using the premium feature share encrypted files, which is one of SendBird's **premium features**.
   */
  require_auth?: boolean;

  // ----------------------------------

  /**
   * Determines whether to send the message without any updates on its associated data.
   * If true, then the channel's unread_message_count and last_message remain unchanged after the message has been sent. (Default: false)
   */
  is_silent?: boolean;

  // ----------------------------------

  /**
   * Specifies a custom message type which is used for message grouping. The length is limited to 128 bytes.
   */
  custom_type?: string;

  /**
   * Specifies additional data that you can store for the message.
   */
  data?: string;

  /**
   * Determines whether to send a push notification for the message to the members of the channel (applicable to group channels only). (Default: true)
   */
  send_push?: boolean;

  /**
   * Specifies the mentioning method which indicates the user scope who will get a notification for the message.
   * Acceptable values are users and channel.
   * - If set to users, only the specified users with the mentioned_users property below will get notified.
   * - If set to channel, all users in the channel will get notified. (Default: users)
   */
  mention_type?: string;

  /**
   * Specifies an array of one or more IDs of the users who will get a notification for the message
   */
  mentioned_user_ids?: string[];

  /**
   * Determines whether to mark the message as read for the sender.
   * If set to false, then the sender's **unread_count** and **read_receipt** remain unchanged after the message is sent. (Default: true)
   */
  mark_as_read?: boolean;

  /**
   * Specifies a JSON object of one or more key-values items which store additional information for the message.
   */
  sorted_metaarray?: SortedMetaArray;

  /**
   * Specifies the time that the message was sent, in Unix milliseconds format. This property can be used when migrating the messages of other system to SendBird server. If specified, the server sets the time of message creation as the property value.
   */
  created_at?: number;

  /**
   * Specifies the unique message ID created by other system. In general, this property is used to prevent the same message data from getting inserted when migrating the messages of the other system to SendBird server. If specified, the server performs a duplicate check using the property value.
   */
  dedup_id?: string;
}

export interface UpdateOption extends ChannelOption, MessageIdOption {
  /**
   * The type of the message:
   * - which is `MESG` for a text message.
   * - which is `FILE` for a file message.
   * - which is `ADMM` for an admin message.
   */
  message_type: 'MESG' | 'FILE' | 'ADMM';

  /**
   * Specifies the content of the message.
   */
  message?: string;

  /**
   * Specifies a custom message type which is used for message grouping. The length is limited to 128 bytes.
   */
  custom_type?: string;

  /**
   * Specifies additional data that you can store for the message.
   */
  data?: string;

  /**
   * Specifies the mentioning method which indicates the user scope who will get a notification for the message.
   * Acceptable values are users and channel.
   * - If set to users, only the specified users with the mentioned_users property below will get notified.
   * - If set to channel, all users in the channel will get notified. (Default: users)
   */
  mention_type?: string;

  /**
   * Specifies an array of one or more IDs of the users who will get a notification for the message
   */
  mentioned_user_ids?: string[];
}

export type TotalCountOption = ChannelOption;

export interface TotalCountResult {
  /**
   * The total count of messages in the channel.
   */
  total: number;
}

export interface UnreadCountOption extends ChannelUrlOption {
  /**
   * Specifies a comma-separated string of one or more IDs of the users to retrieve their unread message count in the channel.
   * Urlencoding each user ID is recommended (for example, `?user_ids=urlencoded_id_1, urlencoded_id_2`).
   */
  user_ids: string;
}

export interface UnreadCountResult {
  /**
   * The count of each member's unread messages in the channel.
   */
  unread: { [key: string]: number };
}

export interface MarkAsReadOption extends ChannelUrlOption {
  /**
   * Specifies the ID of the user to mark all messages as read.
   */
  user_id: string;

  /**
   * Specifies the timestamp to be the reference point of marking as read. If specified, the messages received before the specified time are marked as read.
   */
  timestamp?: number;
}

export interface DeleteOption extends ChannelOption, MessageIdOption {}

export interface ToggleReactionOption {
  /**
   * Determines whether to turn on the message reaction feature. (Default: false)
   */
  enabled: boolean;
}

export interface ToggleReactionResult {
  reactions: boolean;
}

export interface ListReactionsOption extends ChannelOption, MessageIdOption {
  /**
   * Determines whether to list the IDs of users who reacted to the message by reaction in the response.
   * If set to false, this parameter shows the count of each reaction. (Default: false)
   */
  list_users?: boolean;
}

export interface ListReactionsResult {
  [key: string]: number | string[];
}

export interface AddReactionOption extends ChannelOption, MessageIdOption {
  /**
   * Specifies the ID of the user who reacts to the message.
   */
  user_id: string;

  /**
   * Specifies the unique key of the reaction to be added to the message. The length is limited to 192 charaters.
   */
  reaction: string;
}

export interface AddReactionResult {
  /**
   * The ID of the user who reacted to the message
   */
  user_id: string;

  /**
   * The operation type of the request. Either `ADD` or `DELETE`.
   */
  operation: string;

  /**
   * Indicates whether the reaction operation succeeded or failed.
   * A value of `false` indicates that there is an identical reaction attempt made by the same user to the same message.
   */
  success: boolean;

  /**
   * The unique key of the reaction.
   */
  reaction: string;

  /**
   * The time when the message reaction was updated in Unix milliseconds. This appears only when the success property is true.
   */
  updated_at: number;
}

export type RemoveReactionOption = AddReactionOption;

export type RemoveReactionResult = AddReactionResult;

export interface AddMetadataOption extends ChannelOption, MessageIdOption {
  /**
   * Specifies a `JSON` object of one or more key-values items which store additional information for the message.
   * Each item consists of a key and the values in an array. Items are saved and will be returned in the exact order they’ve been specified.
   */
  sorted_metaarray: SortedMetaArray;
}

export interface AddMetadataResult {
  sorted_metaarray: SortedMetaArray;
}

export interface UpdateMetadataOption extends AddMetadataOption {
  /**
   * Determines whether to add the specified values in the items or remove the specified values from the existing items.
   * Acceptable values are limited to `add` and `remove`.
   * - If set to `add`, the specified values are added only when they are different from the existing values.
   * - If set to `remove`, the specified values are removed only when they have the corresponding ones in the existing values.
   */
  mode: 'add' | 'remove';

  /**
   * Determines whether to add new items in addition to updating existing items.
   * If `true`, new key-values items are added when there are no items with the keys.
   * The existing items are updated with new values when there are already items with the keys.
   * If `false`, only the items of which keys match the ones you specify are updated with new values. (Default: false)
   */
  upsert: boolean;
}

export interface UpdateMetadataResult extends AddMetadataResult {
  mode: 'add' | 'remove';
  upsert: boolean;
}

export interface RemoveMetadataOption extends ChannelOption, MessageIdOption {
  /**
   * In a query string, specifies an array of one or more keys of items to remove from the message.
   * Urlencoding each key is recommended (for example, `?keys=urlencoded_key_1, urlencoded_key_2`).
   */
  keys: string;
}

export interface TranslateOption extends ChannelOption, MessageIdOption {
  /**
   * Specifies an array of one or more codes of languages to translate the message into.
   */
  target_langs: Language[];
}
